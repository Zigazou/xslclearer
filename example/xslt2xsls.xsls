// Transform XSL Template into XSLS format
stylesheet(
    version="1.0",
    xmlns:xsl="http://www.w3.org/1999/XSL/Transform"
) {
    output(method="text", encoding="utf-8");

    // Special template for the xsl:variable tag (shortcut)
    template(match="xsl:variable") {
        choose() {
            // $variable = value;
            when("string-length(@select) > 0") {
                [$]value-of(select="@name");[ = "]value-of(select="@select");[";]
            }
            
            // $variable = { program }
            otherwise() {
                [$]value-of(select="@name");[ = {]
                    apply-templates();
                [}]
            }
        }
    }

    // Shortcut for for-each tag
    template(match="xsl:for-each") {
        [for-each("]value-of(select="@select");[") {]
            apply-templates();
        [}]
    }

    // Shortcut for when tag
    template(match="xsl:when") {
        [when("]value-of(select="@test");[") {]
            apply-templates();
        [}]
    }

    // Shortcut for if tag
    template(match="xsl:if") {
        [if("]value-of(select="@test");[") {]
            apply-templates();
        [}]
    }

    // Shortcut for call-template tag
    template(match="xsl:call-template") {
        choose() {
            // $variable = value;
            when("*") {
                [call-template("]value-of(select="@name");[") {]
                    apply-templates();
                [}]
            }
            
            // $variable = { program }
            otherwise() {
                [call-template("]value-of(select="@name");[");]
            }
        }
    }

    // Template for every other xsl tag
    template(match="xsl:*") {
        value-of(select="substring-after(name(), 'xsl:')");
        [(]call-template("attributes");[)]
        choose() {
            when("*") {
                [ {]
                    apply-templates();
                [}]
            }
            otherwise() {
                [;]
            }
        }
    }

    // Handle every other tag
    template(match="*") {
        $tag = {
            value-of(select="name()");
            for-each("@*") {
                value-of(select="concat(' ', name(), '=\"', ., '\"')");
            }
        }

        [[&lt;]value-of(select="$tag");[&gt;\]]
        apply-templates();
        [[&lt;/]value-of(select="name()");[&gt;\]]
    }

    // Handle text
    template(match="*/text()") {
        choose() {
            when("string-length(normalize-space(.)) > 0") {
                [[]value-of(select=".");[\]]
            }
            otherwise() {
                value-of(select=".");
            }
        }
    }

    // Template for attributes
    template(name="attributes") {
        $attributes = {
            for-each("@*") {
                value-of(select="concat(name(), '=\"', ., '\", ')");
            }
        }

        // Delete the last comma
        if("string-length($attributes) > 0") {
            value-of(select="substring($attributes, 0, string-length($attributes) - 1)");
        }
    }
    
    // Template for comments
    template(match="comment()") {
    }
}
